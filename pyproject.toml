[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bigmap"
version = "0.1.0"
description = "North Carolina forest biomass and species diversity analysis tools"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
keywords = ["gis", "forestry", "biomass", "species-diversity", "north-carolina"]
dependencies = [
    # Core scientific computing
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "xarray>=0.19.0",
    # Geospatial and data storage
    "zarr>=2.10.0",
    "rasterio>=1.2.0",
    "geopandas>=0.10.0",
    "numcodecs>=0.9.0",
    # Visualization and UI
    "matplotlib>=3.4.0",
    "rich>=13.0.0",
    # Data validation and configuration
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    # Command line interface
    "typer>=0.12.0",
    # HTTP requests for REST API
    "requests>=2.28.0",
    "tqdm>=4.67.1",
    "scikit-learn>=1.6.1",
    "pyyaml>=6.0.2",
]
requires-python = ">=3.9"

[project.scripts]
# Main CLI entry point using Typer
bigmap = "bigmap.cli.main:app"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/bigmap"
Documentation = "https://bigmap.readthedocs.io/"
Repository = "https://github.com/yourusername/bigmap.git"
"Bug Tracker" = "https://github.com/yourusername/bigmap/issues"

[tool.hatch.build.targets.wheel]
packages = ["bigmap"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bigmap"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=bigmap",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["bigmap"]
omit = [
    "tests/*",
    "bigmap/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
